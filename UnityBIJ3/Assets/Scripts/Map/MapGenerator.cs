using System;
using System.Collections.Generic;
using System.Text;
using UnityEngine;

public class MapGenerator : MonoBehaviour
{
    [SerializeField] int mapSize = 50;
    [SerializeField] float xScale = 1;
    [SerializeField] float zScale = 1;
    [SerializeField] float xOffset = 0;
    [SerializeField] float zOffset = 0;
    [SerializeField] float yOffset = 0;
    [SerializeField] float height = 1;

    [SerializeField] int centerPosX = 25;
    [SerializeField] int centerPosZ = 25;
    [SerializeField] float centerRadius = 50;
    [SerializeField] float centerMultiplier = 5;

    [SerializeField] float hexSize = 1f;
    float hexWidth;
    float hexHeight;

    float[,] map;

    void Start()
    {
        map = new float[mapSize * 2, mapSize];
    }

    void Update()
    {
        UpdateMap();
        DrawMap();
    }

    private void UpdateMap()
    {
        for (int zCoord = 0; zCoord < mapSize; zCoord++)
        {
            float blurValue = 0;
            for (int x = 0; x < mapSize * 2; x += 2)
            {
                int z = zCoord;
                int xCoord = x + (zCoord % 2);

                var normalValue = Mathf.PerlinNoise((xOffset + xCoord) / mapSize * xScale, (zOffset + z) / mapSize * zScale);

                var value = normalValue;
                var distance = (new Vector2(x, z) - new Vector2(centerPosX, centerPosZ)).magnitude;
                if (distance < centerRadius)
                {
                    var t = (1 - distance / centerRadius);
                    value *= (t * centerMultiplier);
                    value = Mathf.SmoothStep(normalValue, value, t);
                }

                var currentBlurValue = blurValue;
                blurValue = value;
                value = (currentBlurValue + value) / 2;
                map[xCoord, zCoord] = Mathf.Clamp((value * height) + yOffset, 0, float.MaxValue);
            }
        }

        PrintMap();
    }

    private void DrawMap()
    {
        hexWidth = Mathf.Sqrt(3) * hexSize;
        hexHeight = hexSize * 2;

        for (int zCoord = 0; zCoord < mapSize; zCoord++)
        {
            for (int x = 0; x < mapSize * 2; x += 2)
            {
                int xCoord = x + (zCoord % 2);

                if (map[xCoord, zCoord] > 0)
                {
                    var color = HasEmptyCellArround(xCoord, zCoord) ? Color.blue : Color.green;
                    if (xCoord == centerPosX && zCoord == centerPosZ)
                    {
                        color = Color.red;
                    }
                    DrawHex(zCoord, x / 2, color);
                }
            }
        }
    }

    private void DrawHex(int z, int x, Color color)
    {
        var xCorner = hexWidth / 2f;
        var zCorner = hexHeight / 4f;
        var xOff = (z % 2) * (hexWidth / 2f);
        var pos = new Vector3(x * hexWidth + xOff, 0, z * 3f / 4f * hexHeight);

        var top = pos + new Vector3(0, 0, hexSize);
        var topRight = pos + new Vector3(xCorner, 0, zCorner);
        var bottomRight = pos + new Vector3(xCorner, 0, -zCorner);
        var bottom = pos + new Vector3(0, 0, -hexSize);
        var bottomLeft = pos + new Vector3(-xCorner, 0, -zCorner);
        var topLeft = pos + new Vector3(-xCorner, 0, zCorner);

        Debug.DrawLine(top, topRight, color);
        Debug.DrawLine(topRight, bottomRight, color);
        Debug.DrawLine(bottomRight, bottom, color);
        Debug.DrawLine(bottom, bottomLeft, color);
        Debug.DrawLine(bottomLeft, topLeft, color);
        Debug.DrawLine(topLeft, top, color);
    }

    private bool HasEmptyCellArround(int x, int z)
    {
        return
            EmptyAt(x - 2, z) ||
            EmptyAt(x + 2, z) ||
            EmptyAt(x - 1, z - 1) ||
            EmptyAt(x - 1, z + 1) ||
            EmptyAt(x + 1, z - 1) ||
            EmptyAt(x + 1, z + 1);
    }

    private bool EmptyAt(int x, int z)
    {
        if (x < 0 || z < 0) return true;
        if (x >= map.GetLength(0) || z >= map.GetLength(1)) return true;

        return map[x, z] <= 0;
    }

    private void PrintMap()
    {
        //print("map:");
        //print("--------------------------------");
        //StringBuilder sb = new StringBuilder();
        //for (int i = 0; i < map.GetLength(0); i++)
        //{
        //    for (int j = 0; j < map.GetLength(1); j++)
        //    {
        //        char c = map[i, j] > 0 ? '1' : '0';
        //        sb.Append(c);
        //    }
        //    sb.AppendLine();
        //}
        //print(sb.ToString());
    }
}


/*
 00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000100000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000101010101000000000000000000000
00000000000000000000010101000000000000000000000000
00000000000000000010101010101000000000000000000000
00000000000000000001010101010000000000000000000000
00000000000000000010101010101000000000000000000000
00000000000000000101010101010100000000000000000000
00000000000000000010101010101010000000000000000000
00000000000000000101010101010101000000000000000000
00000000000000000010101010101010100000000000000000
00000000000000000101010101010101000000000000000000
00000000000000000010101010101010100000000000000000
00000000000000000001010101010101010000000000000000
00000000000000000000101010101010100000000000000000
00000000000000000001010101010101010000000000000000
00000000000000000000001010101010100000000000000000
00000000000000000000010101010101010000000000000000
00000000000000000000001010101010100000000000000000
00000000000000000000010101010101010000000000000000
00000000000000000000000010101010100000000000000000
00000000000000000000000101010101000000000000000000
00000000000000000000000000101000000000000000000000
00000000000000000000000000010100000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000

UnityEngine.MonoBehaviour:print (object)
MapGenerator:PrintMap () (at Assets/Scripts/Map/MapGenerator.cs:136)
MapGenerator:UpdateMap () (at Assets/Scripts/Map/MapGenerator.cs:62)
MapGenerator:Update () (at Assets/Scripts/Map/MapGenerator.cs:34)

 */